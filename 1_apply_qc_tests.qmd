---
format: 
  html:
    toc: true
    toc-depth: 3
    embed-resources: true
editor_options: 
  chunk_output_type: console
params:
  county: county
  depl_file: depl_file
---

```{r, set-up, include=FALSE}
knitr::opts_chunk$set(echo = FALSE, dpi = 600, fig.width = 8)

library(data.table)
library(dplyr)
library(DT)
library(ggplot2)
library(knitr)
library(here)
library(lubridate)
library(qaqcmar)
library(RColorBrewer)
library(readxl)
library(sensorstrings)
library(stringr)
library(tidyr)

source(here("functions/subchunkify.R"))

dt_options1 <- list(
      dom = 'ft',
      paging = FALSE,
      searching = FALSE,
      pageLength = 500,
      columnDefs = list(list(className = 'dt-center', targets = "_all"))
)

dt_options2 <- list(
      dom = 'Bft',
      paging = FALSE,
      searching = TRUE,
      pageLength = 500,
      scrollY = "500px",
      scrollX = "500px",
      columnDefs = list(list(className = 'dt-center', targets = "_all")),
      buttons = c('copy', 'csv')
)

# county <- params$county
# depl_file <- params$depl_file

county <- "guysborough"
path <- file.path("R:/data_branches/inland_water_quality/processed_data/deployment_data")
depls <- list.files(
  paste(path, county, "new", sep = "/"),
  pattern = ".rds",
  full.names = TRUE
)
depl_file <- depls[1]

path_out <- file.path("R:/data_branches/inland_water_quality/processed_data")

file_name <- sub(".*/", "", depl_file, perl = TRUE)


```


```{r, apply-qc-tests}
#| include: false

dat_raw <- readRDS(depl_file)

station2 <- unique(dat_raw$station)
depl_range2 <- unique(dat_raw$deployment_range)[1]

human_in_loop <- read_excel("R:/tracking_sheets/2024-10-17_inland_water_quality_human_in_loop_tracking.xlsx", 
  na = c("NA", "")) %>%
  filter(station == station2) 

# %>%
#   filter(depl_range == depl_range2)


human_in_loop$depl_range[1]
depl_range

vars <- dat_raw %>% 
  ss_pivot_longer() %>% 
  distinct(variable)

vars <- sort(vars$variable)

# if sensor depth was not measured, do not run qc_test_depth_crosscheck
if("sensor_depth_measured_m" %in% vars) {
  qc_tests = c(
    "grossrange", "rolling_sd", "depth_crosscheck"
  )
   join_column_spike <- "sensor_type"
} else{
  qc_tests = c("grossrange", "rolling_sd")
  
  join_column_spike <- NULL
}

# do not apply user grossrange test for certain stations
atypical_stations <- c("Hourglass Lake", "Sissiboo", "Piper Lake", "Mersey River 3")

if (station %in% atypical_stations) {
  thresholds <-
    read.csv(
      "C:/Users/Nicole Torrie/Documents/R/cmp_code/inland_thresholds_analysis/thresholds_inland_atypical.csv"
    )
} else{
  thresholds <-
    read.csv(
      "C:/Users/Nicole Torrie/Documents/R/cmp_code/inland_thresholds_analysis/thresholds_inland.csv"
    )
}

# assign flags - qc tests
dat <- dat_raw %>% 
  qc_test_all(qc_tests = qc_tests, join_column_spike = join_column_spike) %>% 
  qc_test_human_in_loop(human_in_loop_table = human_in_loop)

if(any(str_detect(colnames(dat), "human_in_loop"))) {
  qc_tests <- c(qc_tests, "human_in_loop")
}

# assign max flag
dat <- dat %>% 
  qc_assign_max_flag(qc_tests = qc_tests)

if (nrow(dat) != nrow(dat_raw)) knitr::knit_exit()

qc_tests <- c(qc_tests, "qc")

# use to make qc_summary and figures
dat_long <- dat %>% 
  qc_pivot_longer(qc_tests = qc_tests)

# export
qc_summary <- dat_long %>% 
  qc_summarise_flags() %>% 
  mutate(
    county = county, 
    station = station, 
    deployment_range = depl_range
  ) %>% 
  select(county, station, deployment_range, everything()) %>% 
  filter(
    !(qc_test == "climatology" &
        (variable == "salinity_psu" | variable == "sensor_depth_measured_m"))
  )

# # check same number of rows for each test within variable
# qc_summary %>%
#   group_by(qc_test, variable) %>% 
#   summarise(n = sum(n_flag)) %>% 
#   arrange(variable)


#################################################################
#### EXPORT ####################################################

saveRDS(dat, paste(path_out, "qc_data", county, "new", file_name, sep = "/"))

#saveRDS(dat, paste(here(), file_name, sep = "/"))


fwrite(qc_summary,
          paste(path_out, "qc_data/qc_flag_summary.csv", sep = "/"),
          append = TRUE)

###############################################################
###############################################################


```

# `r station`: `r depl_range`

`r Sys.Date()`

## Deployment Details

```{r}
dat %>% 
  select(county, waterbody, station, lease, latitude, longitude,
         deployment_range, string_configuration) %>% 
  distinct() %>% 
  t() %>% 
  kable()
```


## Sensor Details

```{r}
dat_long %>% 
  select(
    variable, 
    sensor_depth = sensor_depth_at_low_tide_m, 
    sensor_type, sensor_serial_number
  ) %>% 
  distinct() %>% 
  datatable(options = dt_options1, rownames = FALSE)
```

# QC Summary

```{r}
qc_summary %>% 
  select(-c(county, station, deployment_range)) %>% 
  datatable(options = dt_options2, rownames = FALSE, extensions = 'Buttons')
```

`r if(nrow(human_in_loop) > 0) {"## Human in Loop Comments"}` 
```{r}
if(nrow(human_in_loop) > 0) {
  human_in_loop %>% 
    select(-c(county, station, depl_range)) %>% 
    datatable(rownames = FALSE, options = dt_options1)
}
```


# QC Figures

```{r} 
#| message: FALSE
#| results: asis

if("sensor_depth_measured_m" %in% vars) {

  cat('\n## depth_crosscheck \n')

  # height of figure 
  n_sensor <- dat_long %>% 
    filter(variable == "sensor_depth_measured_m" & !is.na(value)) %>% 
    distinct(sensor_serial_number)
  n_sensor <- nrow(n_sensor)
    
  if(n_sensor == 1) h = 2.75
  if(n_sensor > 1) h = 2.75 * n_sensor
  
  p <- qc_plot_flags(dat_long, qc_tests = "depth_crosscheck", ncol = 1)

  subchunkify(p$depth_crosscheck, fig_height = h, fig_width = 8.5)

  qc_tests <- qc_tests[-which(qc_tests == "depth_crosscheck")]

}


for(i in seq_along(vars)){

  var_i <- vars[i]

  cat('\n##', var_i, '\n')

  cat('\n')

  for(j in seq_along(qc_tests)) {

    test_j <- qc_tests[j]

    # climatology test not applied to these variables
    if(!(test_j == "climatology" &
         (var_i == "salinity_psu" | var_i == "sensor_depth_measured_m"))) {

      if(test_j == "qc") {
         cat('\n### summary flags \n')
      } else cat('\n###', test_j, '\n')

      # subset data to variable of interest
      dat_j <- dat_long %>%
        filter(variable == var_i)

      # height of figure j
      n_sensor <- length(unique(dat_j$sensor_serial_number))

      if(n_sensor == 1) h = 2.25
      if(n_sensor > 1) h = 2.25 * n_sensor

      p <- qc_plot_flags(dat_j, qc_tests = test_j, ncol = 1, flag_title = FALSE)

      subchunkify(p[[1]][[1]], fig_height = h, fig_width = 8.5)

      cat('\n')
    }
  }
}

```

`r knitr::knit_exit()`
```{r}

# height of figure j
n_var <- length(unique(dat_long$variable))

if(n_var == 1) h = 2.25
if(n_var > 1) h = 2.25 * n_var

pal <- brewer.pal(8, "Accent")
pal <- pal[2:length(pal)]

p <- dat_long %>%
  ggplot(aes(timestamp_utc, value, col = hil_comment)) +
  geom_point() +
  scale_color_manual(values = pal) +
  facet_wrap(~sensor_serial_number + variable, ncol = 1, scales = "free_y")

subchunkify(p, fig_height = h, fig_width = 8.5)
```












